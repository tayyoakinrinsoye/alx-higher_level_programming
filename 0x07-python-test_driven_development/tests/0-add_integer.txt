============================
How to use 0-add_integer.py
============================

This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
======

``add_integer(...)`` returns the addition of its arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(5, 5)
    10

It works for negative values

::

    >>> add_integer(-1, 2)
    1

The function also works with floating-point values

::

    >>> add_integer(2.0, 6.0)
    8

Be informed that floats are casted into int before operation is performed

::

    >>> add_integer(2.9, 3.2)
    5

Floating and not floating point values can be combined

::

    >>> add_integer(2, 3.9)
    5

Second value is optional as it is supplied to be 98 by default

:: 

    >>> add_integer(5)
    103

Non numbers
===========

``add_integer()`` expects that both arguments are either floats or integers.
if either argument is non-integer or non-float, a TypeError is raised.

::

    >>> add_integer(3, "world")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer("hello", 7.5)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.8, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument

::

    >>> add_integer("hello", "world")
    Traceback (most recent call last):
    TypeError: a must be an integer

